/*!
    @defgroup psi5 Peripheral Sensor Interface 5 (PSI5)
    @brief Peripheral Sensor Interface 5 (PSI5) Peripheral Driver \n
    The PSI5 driver allows reception and transmission on the PSI5 bus.
    
    # Important Notes #
        - The driver enables the interrupts for the corresponding PSI5 module, but any interrupt prioritization
        must be done by the application
        - The board specific configurations must be done prior to driver calls; the driver has no influence on the
        functionality of the din/dout pins - they must be configured by application
        - DMA module must be initialized prior to PSI5 usage in DMA mode; also, DMA channels need to be allocated
        for PSI5 usage by the application (the driver only takes care of configuring the DMA channels received in
        the configuration structure)
        - Clock module needs to be initialized prior to PSI5 usage; also the clock module needs to be configured such
        as the clocks routed to the PSI5 instance have the following values:
            - PSI5RxN_CLK = 4MHz
            - PSI51usN_CLK = 1MHz

    # Integration guideline #
        ## Compilation units ##
        The following files need to be compiled in the project:
        \verbatim
        ${S32SDK_PATH}\platform\drivers\src\psi5\psi5_driver.c
        ${S32SDK_PATH}\platform\drivers\src\psi5\psi5_irq.c
        ${S32SDK_PATH}\platform\drivers\src\psi5\psi5_hw.c
        \endverbatim

        ## Include path ##
        The following paths need to be added to the include path of the toolchain:
        \verbatim
        ${S32SDK_PATH}\platform\drivers\inc\
        \endverbatim

        ## Preprocessor symbols ##
        No special symbols are required for this component

        ## Dependencies ##
        \ref clock_manager \n
        \ref interrupt_manager \n
        \ref edma \n

    # Features #
    - Support for the reception of PSI5 and SMC messages.
    - Interrupt or DMA driven reception.
    - User triggered transmission

    In order to use the PSI5 driver, it must be first initialized using the PSI5_DRV_Init function.
    Once initalized, it must be deinitialized with PSI5_DRV_Deinit before any configuration 
    settings are to be changed. Different PSI5 module instances can be configured independently.

    The driver can be used in multiple modes, the choice betwen modes is made through data 
    passed in the configuration structure.
    
    # Driver modes #
    ## Polled mode ##
        In this mode, no interrupts are required, reading and writing data is performed by the following functions:
        
        @code
        status_t PSI5_DRV_GetRawPsi5Frame(const uint32_t instance, const uint32_t channel, psi5_raw_frame_t * frame)
        status_t PSI5_DRV_GetRawSmcFrame(const uint32_t instance, const uint32_t channel, psi5_raw_frame_t * frame)
        status_t PSI5_DRV_Transmit(const uint32_t instance, const uint32_t channel, const uint64_t data)
        @endcode
        
        Any of the functions will return STATUS_SUCCESS if the operation completed succesfully, and STATUS_ERROR otherwise.
        The statuses can be used to perform a blocking Rx/Tx operation by doing:
        
        @code
        while (PSI5_DRV_GetRawPsi5Frame(instance, channel, frame) != STATUS_SUCCESS) {};
        @endcode

    ## Interrupt Rx mode ##
        This is entered as long as no DMA activation
        flags are enabled for the given channel. 
        In this mode the aplication shall read any
        incoming data available flags when the Receive 
        notification is called, and take make the corresponding 
        read call (only if DMA is not enabled)

        Getting the actual messages:
        
        @code
        status_t PSI5_DRV_GetRawPsi5Frame(const uint32_t instance, const uint32_t channel, psi5_raw_frame_t * frame)
        status_t PSI5_DRV_GetRawSmcFrame(const uint32_t instance, const uint32_t channel, psi5_raw_frame_t * frame)
        @endcode

    ## DMA Rx mode ##
        This is active as long as DMA activation flags are enabled for the given channels. In this mode,
        based on the given configuration, the peripheral will transfer the data to the given buffers.
        This mode will also call the notification function (if provided) with a suitable event flag. 
        The number of transferred frames and the watermark is controlled through the "rxBufSize" parameter.

    ## Tx mode ##
        Transmission is possible as long as there is no pending data.
        This is achieved by calling:
        
        @code
        status_t PSI5_DRV_Transmit(const uint32_t instance, const uint32_t channel, const uint64_t data)
        @endcode
        
        The function will return STATUS_ERROR if the data buffers are busy.
        Transmission mode is defined in the configuration structure, and is compliant with the official PSI5 specifications.
        In case that notifications are not used, blocking transmissions could be performed by polling the state:
        
        @code
        while (PSI5_DRV_Transmit(instance, channel, frame) != STATUS_SUCCESS) {};
        @endcode

    # Notifications #
        ## Notification function ##
            The PSI5 driver requires the application to have a defined notification function for the peripheral.
            The function shall have the following signature:

            @code
            void <notification_name>(const uint32_t instance, const uint32_t channel, const psi5_event_t events, void * param)
            @endcode

            Where:
                - instance - Instance number
                - channel - Channel number
                - events - Event flags
                - param - User parameter
                
        ## Event flags ##
            The event flags shall contain one or multiple of the following flags:
                - PSI5_EV_PSI5_RX - On PSI5 message reception
                - PSI5_EV_PSI5_OVR - On PSI5 data buffer overwrite
                - PSI5_EV_PSI5_ERR - On PSI5 data error
                - PSI5_EV_SMC_RX - On SMC message reception
                - PSI5_EV_SMC_OVR - On SMC data buffer overwrite
                - PSI5_EV_SMC_ERR - On SMC data error
                - PSI5_EV_TX_DATA_OVR - Tx data overwrite
                - PSI5_EV_TX_DATA_RDY - Tx ready for new data
                - PSI5_EV_PSI5_DMA_OVF - PSI5 DMA buffer overflow
                - PSI5_EV_PSI5_DMA_UF - PSI5 DMA buffer underflow
                - PSI5_EV_PSI5_DMA_COMPLETE - PSI5 DMA transfer complete
                - PSI5_EV_SMC_DMA_UF - SMC DMA buffer overflow
                - PSI5_EV_SMC_DMA_COMPLETE - SMC DMA transfer complete

    # Example code #
    @code
    psi5_raw_frame_t psi5_raw_frame;
    psi5_psi5_frame_t psi5_normal_frame;

    void psi5Notification(const uint32_t instance, const uint32_t channel, const psi5_event_t events, void * param)
    {
        if (events & PSI5_EV_PSI5_RX) 
        {
            PSI5_DRV_GetRawPsi5Frame(instance, channel, &psi5_raw_frame);
            PSI5_DRV_ConvertPsi5Frame(instance, channel, &psi5_normal_frame, &psi5_raw_frame);
        }
    }

    void main(void)
    {
        /* Initialize clock */
        CLOCK_SYS_Init(g_clockManConfigsArr, CLOCK_MANAGER_CONFIG_CNT,
                       g_clockManCallbacksArr, CLOCK_MANAGER_CALLBACK_CNT);
  
        CLOCK_SYS_UpdateConfiguration(0U, CLOCK_MANAGER_POLICY_AGREEMENT);

        /* Initialize pins */
        PINS_DRV_Init(NUM_OF_CONFIGURED_PINS, g_pin_mux_InitConfigArr);

        /* Initialize DMA */
        EDMA_DRV_Init(&dmaController1_State, &dmaController1_InitConfig0, edmaChnStateArray, edmaChnConfigArray, EDMA_CONFIGURED_CHANNELS_COUNT);

        /* Initialize PSI5 */
        PSI5_DRV_Init(INST_PSI51, &psi51_InitConfig0, &psi51State);
        
        /* Enable IRQs */
        INT_SYS_EnableIRQGlobal();
        
        while(1);
    }     
    @endcode
@}*/
